<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;

		// use GET parameters to restore a flamegraphs state.
		var params = get_params();
		if (params.x && params.y)
			zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
                if (params.s) search(params.s);
	}

	// event listeners
	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
			if (!document.querySelector('.parent')) {
				clearzoom();
				return;
			}

			// set parameters for zoom state
			var el = target.querySelector("rect");
			if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
				var params = get_params()
				params.x = el.attributes._orig_x.value;
				params.y = el.attributes.y.value;
				history.replaceState(null, null, parse_params(params));
			}
		}
		else if (e.target.id == "unzoom") clearzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
		else if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function get_params() {
		var params = {};
		var paramsarr = window.location.search.substr(1).split('&');
		for (var i = 0; i < paramsarr.length; ++i) {
			var tmp = paramsarr[i].split("=");
			if (!tmp[0] || !tmp[1]) continue;
			params[tmp[0]]  = decodeURIComponent(tmp[1]);
		}
		return params;
	}
	function parse_params(params) {
		var uri = "?";
		for (var key in params) {
			uri += key + '=' + encodeURIComponent(params[key]) + '&';
		}
		if (uri.slice(-1) == "&")
			uri = uri.substring(0, uri.length - 1);
		if (uri == '?')
			uri = window.location.href.split('?')[0];
		return uri;
	}
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}
	function clearzoom() {
		unzoom();

		// remove zoom state
		var params = get_params();
		if (params.x) delete params.x;
		if (params.y) delete params.y;
		history.replaceState(null, null, parse_params(params));
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
		var params = get_params();
		delete params.s;
		history.replaceState(null, null, parse_params(params));
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) search(term);
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (term) currentSearchTerm = term;

		var re = new RegExp(currentSearchTerm, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;
		var params = get_params();
		params.s = currentSearchTerm;
		history.replaceState(null, null, parse_params(params));

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.24%)</title><rect x="1184.3" y="485" width="2.8" height="15.0" fill="rgb(222,81,33)" rx="2" ry="2" />
<text  x="1187.30" y="495.5" ></text>
</g>
<g >
<title>nf_hook_slow (1 samples, 0.24%)</title><rect x="15.7" y="373" width="2.9" height="15.0" fill="rgb(241,107,5)" rx="2" ry="2" />
<text  x="18.70" y="383.5" ></text>
</g>
<g >
<title>__GI___libc_write (85 samples, 20.53%)</title><rect x="486.0" y="437" width="242.3" height="15.0" fill="rgb(230,107,44)" rx="2" ry="2" />
<text  x="488.99" y="447.5" >__GI___libc_write</text>
</g>
<g >
<title>__libc_start_main (162 samples, 39.13%)</title><rect x="728.3" y="613" width="461.7" height="15.0" fill="rgb(243,129,4)" rx="2" ry="2" />
<text  x="731.26" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>tcp_recvmsg (1 samples, 0.24%)</title><rect x="10.0" y="517" width="2.9" height="15.0" fill="rgb(209,199,9)" rx="2" ry="2" />
<text  x="13.00" y="527.5" ></text>
</g>
<g >
<title>start_thread (93 samples, 22.46%)</title><rect x="463.2" y="629" width="265.1" height="15.0" fill="rgb(214,174,40)" rx="2" ry="2" />
<text  x="466.19" y="639.5" >start_thread</text>
</g>
<g >
<title>__fdget (1 samples, 0.24%)</title><rect x="1184.3" y="421" width="2.8" height="15.0" fill="rgb(216,128,36)" rx="2" ry="2" />
<text  x="1187.30" y="431.5" ></text>
</g>
<g >
<title>__vfs_write (85 samples, 20.53%)</title><rect x="486.0" y="357" width="242.3" height="15.0" fill="rgb(226,184,53)" rx="2" ry="2" />
<text  x="488.99" y="367.5" >__vfs_write</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (85 samples, 20.53%)</title><rect x="486.0" y="421" width="242.3" height="15.0" fill="rgb(205,81,17)" rx="2" ry="2" />
<text  x="488.99" y="431.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.72%)</title><rect x="463.2" y="565" width="8.5" height="15.0" fill="rgb(231,37,26)" rx="2" ry="2" />
<text  x="466.19" y="575.5" ></text>
</g>
<g >
<title>do_syscall_64 (85 samples, 20.53%)</title><rect x="486.0" y="405" width="242.3" height="15.0" fill="rgb(216,142,38)" rx="2" ry="2" />
<text  x="488.99" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>__ip_local_out (1 samples, 0.24%)</title><rect x="15.7" y="389" width="2.9" height="15.0" fill="rgb(245,59,22)" rx="2" ry="2" />
<text  x="18.70" y="399.5" ></text>
</g>
<g >
<title>zmq::mailbox_t::send (149 samples, 35.99%)</title><rect x="756.8" y="437" width="424.6" height="15.0" fill="rgb(253,50,10)" rx="2" ry="2" />
<text  x="759.76" y="447.5" >zmq::mailbox_t::send</text>
</g>
<g >
<title>zmq::io_object_t::set_pollout (1 samples, 0.24%)</title><rect x="483.1" y="469" width="2.9" height="15.0" fill="rgb(213,16,18)" rx="2" ry="2" />
<text  x="486.14" y="479.5" ></text>
</g>
<g >
<title>do_nanosleep (1 samples, 0.24%)</title><rect x="734.0" y="517" width="2.8" height="15.0" fill="rgb(232,129,23)" rx="2" ry="2" />
<text  x="736.96" y="527.5" ></text>
</g>
<g >
<title>ipv4_conntrack_local (1 samples, 0.24%)</title><rect x="15.7" y="357" width="2.9" height="15.0" fill="rgb(248,152,26)" rx="2" ry="2" />
<text  x="18.70" y="367.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (152 samples, 36.71%)</title><rect x="24.3" y="133" width="433.2" height="15.0" fill="rgb(211,96,32)" rx="2" ry="2" />
<text  x="27.25" y="143.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>schedule (2 samples, 0.48%)</title><rect x="466.0" y="469" width="5.7" height="15.0" fill="rgb(206,39,46)" rx="2" ry="2" />
<text  x="469.04" y="479.5" ></text>
</g>
<g >
<title>__libc_recv (1 samples, 0.24%)</title><rect x="10.0" y="629" width="2.9" height="15.0" fill="rgb(227,115,29)" rx="2" ry="2" />
<text  x="13.00" y="639.5" ></text>
</g>
<g >
<title>s_sendmsg (156 samples, 37.68%)</title><rect x="745.4" y="565" width="444.6" height="15.0" fill="rgb(208,115,21)" rx="2" ry="2" />
<text  x="748.36" y="575.5" >s_sendmsg</text>
</g>
<g >
<title>zmq::ctx_t::send_command (1 samples, 0.24%)</title><rect x="739.7" y="437" width="2.8" height="15.0" fill="rgb(231,25,31)" rx="2" ry="2" />
<text  x="742.66" y="447.5" ></text>
</g>
<g >
<title>sys_write (147 samples, 35.51%)</title><rect x="756.8" y="373" width="418.9" height="15.0" fill="rgb(219,207,15)" rx="2" ry="2" />
<text  x="759.76" y="383.5" >sys_write</text>
</g>
<g >
<title>do_softirq_own_stack (155 samples, 37.44%)</title><rect x="18.6" y="309" width="441.7" height="15.0" fill="rgb(219,50,24)" rx="2" ry="2" />
<text  x="21.55" y="319.5" >do_softirq_own_stack</text>
</g>
<g >
<title>sock_sendmsg (158 samples, 38.16%)</title><rect x="12.9" y="549" width="450.3" height="15.0" fill="rgb(224,97,30)" rx="2" ry="2" />
<text  x="15.85" y="559.5" >sock_sendmsg</text>
</g>
<g >
<title>zmq::msg_t::init_size (1 samples, 0.24%)</title><rect x="742.5" y="501" width="2.9" height="15.0" fill="rgb(251,149,26)" rx="2" ry="2" />
<text  x="745.51" y="511.5" ></text>
</g>
<g >
<title>pthread_mutex_lock (2 samples, 0.48%)</title><rect x="1175.7" y="421" width="5.7" height="15.0" fill="rgb(211,77,49)" rx="2" ry="2" />
<text  x="1178.75" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_write (147 samples, 35.51%)</title><rect x="756.8" y="421" width="418.9" height="15.0" fill="rgb(227,200,52)" rx="2" ry="2" />
<text  x="759.76" y="431.5" >__GI___libc_write</text>
</g>
<g >
<title>ep_poll (3 samples, 0.72%)</title><rect x="463.2" y="517" width="8.5" height="15.0" fill="rgb(231,55,39)" rx="2" ry="2" />
<text  x="466.19" y="527.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.24%)</title><rect x="10.0" y="597" width="2.9" height="15.0" fill="rgb(254,69,38)" rx="2" ry="2" />
<text  x="13.00" y="607.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.24%)</title><rect x="483.1" y="437" width="2.9" height="15.0" fill="rgb(215,83,6)" rx="2" ry="2" />
<text  x="486.14" y="447.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.48%)</title><rect x="466.0" y="453" width="5.7" height="15.0" fill="rgb(226,41,5)" rx="2" ry="2" />
<text  x="469.04" y="463.5" ></text>
</g>
<g >
<title>ZMQbg/IO/0 (252 samples, 60.87%)</title><rect x="10.0" y="645" width="718.3" height="15.0" fill="rgb(236,186,9)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >ZMQbg/IO/0</text>
</g>
<g >
<title>sys_sendto (158 samples, 38.16%)</title><rect x="12.9" y="581" width="450.3" height="15.0" fill="rgb(217,78,12)" rx="2" ry="2" />
<text  x="15.85" y="591.5" >sys_sendto</text>
</g>
<g >
<title>zmq::object_t::send_activate_read (151 samples, 36.47%)</title><rect x="751.1" y="485" width="430.3" height="15.0" fill="rgb(244,75,6)" rx="2" ry="2" />
<text  x="754.06" y="495.5" >zmq::object_t::send_activate_read</text>
</g>
<g >
<title>__nf_conntrack_find_get (1 samples, 0.24%)</title><rect x="15.7" y="325" width="2.9" height="15.0" fill="rgb(221,38,54)" rx="2" ry="2" />
<text  x="18.70" y="335.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.24%)</title><rect x="739.7" y="373" width="2.8" height="15.0" fill="rgb(219,74,15)" rx="2" ry="2" />
<text  x="742.66" y="383.5" ></text>
</g>
<g >
<title>zmq::object_t::process_command (2 samples, 0.48%)</title><rect x="480.3" y="549" width="5.7" height="15.0" fill="rgb(206,10,25)" rx="2" ry="2" />
<text  x="483.29" y="559.5" ></text>
</g>
<g >
<title>sys_epoll_ctl (1 samples, 0.24%)</title><rect x="483.1" y="405" width="2.9" height="15.0" fill="rgb(219,87,25)" rx="2" ry="2" />
<text  x="486.14" y="415.5" ></text>
</g>
<g >
<title>zmq_send (156 samples, 37.68%)</title><rect x="745.4" y="581" width="444.6" height="15.0" fill="rgb(242,111,54)" rx="2" ry="2" />
<text  x="748.36" y="591.5" >zmq_send</text>
</g>
<g >
<title>ip_queue_xmit (156 samples, 37.68%)</title><rect x="15.7" y="421" width="444.6" height="15.0" fill="rgb(236,134,32)" rx="2" ry="2" />
<text  x="18.70" y="431.5" >ip_queue_xmit</text>
</g>
<g >
<title>vfs_write (147 samples, 35.51%)</title><rect x="756.8" y="357" width="418.9" height="15.0" fill="rgb(243,212,16)" rx="2" ry="2" />
<text  x="759.76" y="367.5" >vfs_write</text>
</g>
<g >
<title>std::vector&lt;zmq::i_mailbox*, std::allocator&lt;zmq::i_mailbox*&gt; &gt;::operator[] (1 samples, 0.24%)</title><rect x="751.1" y="453" width="2.8" height="15.0" fill="rgb(245,176,27)" rx="2" ry="2" />
<text  x="754.06" y="463.5" ></text>
</g>
<g >
<title>__netif_receive_skb (155 samples, 37.44%)</title><rect x="18.6" y="245" width="441.7" height="15.0" fill="rgb(216,140,32)" rx="2" ry="2" />
<text  x="21.55" y="255.5" >__netif_receive_skb</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.24%)</title><rect x="1184.3" y="469" width="2.8" height="15.0" fill="rgb(215,104,38)" rx="2" ry="2" />
<text  x="1187.30" y="479.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (154 samples, 37.20%)</title><rect x="18.6" y="165" width="438.9" height="15.0" fill="rgb(252,81,52)" rx="2" ry="2" />
<text  x="21.55" y="175.5" >ip_local_deliver_finish</text>
</g>
<g >
<title>zmq::clock_t::rdtsc (1 samples, 0.24%)</title><rect x="748.2" y="533" width="2.9" height="15.0" fill="rgb(209,165,11)" rx="2" ry="2" />
<text  x="751.21" y="543.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.72%)</title><rect x="463.2" y="549" width="8.5" height="15.0" fill="rgb(206,7,48)" rx="2" ry="2" />
<text  x="466.19" y="559.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::write (1 samples, 0.24%)</title><rect x="480.3" y="469" width="2.8" height="15.0" fill="rgb(217,17,14)" rx="2" ry="2" />
<text  x="483.29" y="479.5" ></text>
</g>
<g >
<title>zmq::rep_t::xsend (152 samples, 36.71%)</title><rect x="751.1" y="533" width="433.2" height="15.0" fill="rgb(215,16,32)" rx="2" ry="2" />
<text  x="754.06" y="543.5" >zmq::rep_t::xsend</text>
</g>
<g >
<title>__nanosleep (2 samples, 0.48%)</title><rect x="731.1" y="597" width="5.7" height="15.0" fill="rgb(207,93,46)" rx="2" ry="2" />
<text  x="734.11" y="607.5" ></text>
</g>
<g >
<title>std::vector&lt;zmq::epoll_t::poll_entry_t*, std::allocator&lt;zmq::epoll_t::poll_entry_t*&gt; &gt;::end (1 samples, 0.24%)</title><rect x="477.4" y="565" width="2.9" height="15.0" fill="rgb(243,112,53)" rx="2" ry="2" />
<text  x="480.44" y="575.5" ></text>
</g>
<g >
<title>vfs_write (1 samples, 0.24%)</title><rect x="739.7" y="341" width="2.8" height="15.0" fill="rgb(205,169,24)" rx="2" ry="2" />
<text  x="742.66" y="351.5" ></text>
</g>
<g >
<title>zmq::pipe_t::read (1 samples, 0.24%)</title><rect x="739.7" y="485" width="2.8" height="15.0" fill="rgb(205,12,35)" rx="2" ry="2" />
<text  x="742.66" y="495.5" ></text>
</g>
<g >
<title>s_recvmsg (3 samples, 0.72%)</title><rect x="736.8" y="565" width="8.6" height="15.0" fill="rgb(223,31,34)" rx="2" ry="2" />
<text  x="739.81" y="575.5" ></text>
</g>
<g >
<title>ip_finish_output (155 samples, 37.44%)</title><rect x="18.6" y="373" width="441.7" height="15.0" fill="rgb(234,36,33)" rx="2" ry="2" />
<text  x="21.55" y="383.5" >ip_finish_output</text>
</g>
<g >
<title>ip_finish_output2 (155 samples, 37.44%)</title><rect x="18.6" y="357" width="441.7" height="15.0" fill="rgb(246,21,36)" rx="2" ry="2" />
<text  x="21.55" y="367.5" >ip_finish_output2</text>
</g>
<g >
<title>__fget_light (1 samples, 0.24%)</title><rect x="1184.3" y="405" width="2.8" height="15.0" fill="rgb(210,144,3)" rx="2" ry="2" />
<text  x="1187.30" y="415.5" ></text>
</g>
<g >
<title>zmq::object_t::process_command (1 samples, 0.24%)</title><rect x="736.8" y="533" width="2.9" height="15.0" fill="rgb(245,15,32)" rx="2" ry="2" />
<text  x="739.81" y="543.5" ></text>
</g>
<g >
<title>__vfs_write (147 samples, 35.51%)</title><rect x="756.8" y="341" width="418.9" height="15.0" fill="rgb(222,224,47)" rx="2" ry="2" />
<text  x="759.76" y="351.5" >__vfs_write</text>
</g>
<g >
<title>ip_output (155 samples, 37.44%)</title><rect x="18.6" y="389" width="441.7" height="15.0" fill="rgb(249,66,51)" rx="2" ry="2" />
<text  x="21.55" y="399.5" >ip_output</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.24%)</title><rect x="483.1" y="421" width="2.9" height="15.0" fill="rgb(222,43,17)" rx="2" ry="2" />
<text  x="486.14" y="431.5" ></text>
</g>
<g >
<title>__inet_lookup_established (1 samples, 0.24%)</title><rect x="21.4" y="133" width="2.9" height="15.0" fill="rgb(243,39,44)" rx="2" ry="2" />
<text  x="24.40" y="143.5" ></text>
</g>
<g >
<title>hrtimer_start_range_ns (1 samples, 0.24%)</title><rect x="734.0" y="501" width="2.8" height="15.0" fill="rgb(227,14,24)" rx="2" ry="2" />
<text  x="736.96" y="511.5" ></text>
</g>
<g >
<title>tcp_v4_rcv (154 samples, 37.20%)</title><rect x="18.6" y="149" width="438.9" height="15.0" fill="rgb(210,43,19)" rx="2" ry="2" />
<text  x="21.55" y="159.5" >tcp_v4_rcv</text>
</g>
<g >
<title>nf_conntrack_in (1 samples, 0.24%)</title><rect x="15.7" y="341" width="2.9" height="15.0" fill="rgb(251,178,24)" rx="2" ry="2" />
<text  x="18.70" y="351.5" ></text>
</g>
<g >
<title>do_sys_poll (1 samples, 0.24%)</title><rect x="1184.3" y="437" width="2.8" height="15.0" fill="rgb(219,29,30)" rx="2" ry="2" />
<text  x="1187.30" y="447.5" ></text>
</g>
<g >
<title>do_syscall_64 (147 samples, 35.51%)</title><rect x="756.8" y="389" width="418.9" height="15.0" fill="rgb(221,0,32)" rx="2" ry="2" />
<text  x="759.76" y="399.5" >do_syscall_64</text>
</g>
<g >
<title>zmq::tcp_write (1 samples, 0.24%)</title><rect x="480.3" y="453" width="2.8" height="15.0" fill="rgb(213,110,37)" rx="2" ry="2" />
<text  x="483.29" y="463.5" ></text>
</g>
<g >
<title>zmq::socket_base_t::send (156 samples, 37.68%)</title><rect x="745.4" y="549" width="444.6" height="15.0" fill="rgb(218,147,48)" rx="2" ry="2" />
<text  x="748.36" y="559.5" >zmq::socket_base_t::send</text>
</g>
<g >
<title>__libc_send (158 samples, 38.16%)</title><rect x="12.9" y="629" width="450.3" height="15.0" fill="rgb(226,23,18)" rx="2" ry="2" />
<text  x="15.85" y="639.5" >__libc_send</text>
</g>
<g >
<title>__libc_enable_asynccancel (1 samples, 0.24%)</title><rect x="728.3" y="597" width="2.8" height="15.0" fill="rgb(246,163,49)" rx="2" ry="2" />
<text  x="731.26" y="607.5" ></text>
</g>
<g >
<title>tcp_current_mss (1 samples, 0.24%)</title><rect x="12.9" y="485" width="2.8" height="15.0" fill="rgb(217,175,46)" rx="2" ry="2" />
<text  x="15.85" y="495.5" ></text>
</g>
<g >
<title>zmq::ctx_t::send_command (85 samples, 20.53%)</title><rect x="486.0" y="469" width="242.3" height="15.0" fill="rgb(225,219,17)" rx="2" ry="2" />
<text  x="488.99" y="479.5" >zmq::ctx_t::send_command</text>
</g>
<g >
<title>zmq::router_t::xrecv (2 samples, 0.48%)</title><rect x="739.7" y="517" width="5.7" height="15.0" fill="rgb(250,35,20)" rx="2" ry="2" />
<text  x="742.66" y="527.5" ></text>
</g>
<g >
<title>all (414 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(227,163,50)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>zmq::object_t::send_activate_read (85 samples, 20.53%)</title><rect x="486.0" y="501" width="242.3" height="15.0" fill="rgb(230,126,38)" rx="2" ry="2" />
<text  x="488.99" y="511.5" >zmq::object_t::send_activate_read</text>
</g>
<g >
<title>zmq::stream_engine_base_t::restart_output (2 samples, 0.48%)</title><rect x="480.3" y="501" width="5.7" height="15.0" fill="rgb(240,188,10)" rx="2" ry="2" />
<text  x="483.29" y="511.5" ></text>
</g>
<g >
<title>tcp_data_queue (151 samples, 36.47%)</title><rect x="27.1" y="101" width="430.4" height="15.0" fill="rgb(223,69,13)" rx="2" ry="2" />
<text  x="30.10" y="111.5" >tcp_data_queue</text>
</g>
<g >
<title>ip_local_out (156 samples, 37.68%)</title><rect x="15.7" y="405" width="444.6" height="15.0" fill="rgb(251,209,36)" rx="2" ry="2" />
<text  x="18.70" y="415.5" >ip_local_out</text>
</g>
<g >
<title>sys_write (85 samples, 20.53%)</title><rect x="486.0" y="389" width="242.3" height="15.0" fill="rgb(221,83,24)" rx="2" ry="2" />
<text  x="488.99" y="399.5" >sys_write</text>
</g>
<g >
<title>zmq::io_thread_t::in_event (2 samples, 0.48%)</title><rect x="480.3" y="565" width="5.7" height="15.0" fill="rgb(247,35,13)" rx="2" ry="2" />
<text  x="483.29" y="575.5" ></text>
</g>
<g >
<title>sock_recvmsg (1 samples, 0.24%)</title><rect x="10.0" y="549" width="2.9" height="15.0" fill="rgb(214,108,49)" rx="2" ry="2" />
<text  x="13.00" y="559.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (3 samples, 0.72%)</title><rect x="463.2" y="501" width="8.5" height="15.0" fill="rgb(237,63,24)" rx="2" ry="2" />
<text  x="466.19" y="511.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.24%)</title><rect x="739.7" y="389" width="2.8" height="15.0" fill="rgb(239,22,42)" rx="2" ry="2" />
<text  x="742.66" y="399.5" ></text>
</g>
<g >
<title>sock_def_readable (150 samples, 36.23%)</title><rect x="30.0" y="85" width="427.5" height="15.0" fill="rgb(230,1,12)" rx="2" ry="2" />
<text  x="32.95" y="95.5" >sock_def_readable</text>
</g>
<g >
<title>zmq::worker_poller_base_t::worker_routine (93 samples, 22.46%)</title><rect x="463.2" y="597" width="265.1" height="15.0" fill="rgb(222,73,40)" rx="2" ry="2" />
<text  x="466.19" y="607.5" >zmq::worker_poller_base_t::worker_r..</text>
</g>
<g >
<title>net_rx_action (155 samples, 37.44%)</title><rect x="18.6" y="277" width="441.7" height="15.0" fill="rgb(243,16,4)" rx="2" ry="2" />
<text  x="21.55" y="287.5" >net_rx_action</text>
</g>
<g >
<title>tcp_rcv_established (152 samples, 36.71%)</title><rect x="24.3" y="117" width="433.2" height="15.0" fill="rgb(207,131,31)" rx="2" ry="2" />
<text  x="27.25" y="127.5" >tcp_rcv_established</text>
</g>
<g >
<title>zmq::mailbox_t::recv (2 samples, 0.48%)</title><rect x="1184.3" y="517" width="5.7" height="15.0" fill="rgb(248,180,11)" rx="2" ry="2" />
<text  x="1187.30" y="527.5" ></text>
</g>
<g >
<title>SYSC_recvfrom (1 samples, 0.24%)</title><rect x="10.0" y="565" width="2.9" height="15.0" fill="rgb(247,109,24)" rx="2" ry="2" />
<text  x="13.00" y="575.5" ></text>
</g>
<g >
<title>zmq::object_t::send_command (1 samples, 0.24%)</title><rect x="739.7" y="453" width="2.8" height="15.0" fill="rgb(253,158,14)" rx="2" ry="2" />
<text  x="742.66" y="463.5" ></text>
</g>
<g >
<title>zmq::pipe_t::write (1 samples, 0.24%)</title><rect x="1181.4" y="501" width="2.9" height="15.0" fill="rgb(247,147,14)" rx="2" ry="2" />
<text  x="1184.45" y="511.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::in_event_internal (85 samples, 20.53%)</title><rect x="486.0" y="549" width="242.3" height="15.0" fill="rgb(221,93,3)" rx="2" ry="2" />
<text  x="488.99" y="559.5" >zmq::stream_engine_base_t::in_ev..</text>
</g>
<g >
<title>zmq::epoll_t::loop (90 samples, 21.74%)</title><rect x="471.7" y="581" width="256.6" height="15.0" fill="rgb(206,2,7)" rx="2" ry="2" />
<text  x="474.74" y="591.5" >zmq::epoll_t::loop</text>
</g>
<g >
<title>sys_nanosleep (1 samples, 0.24%)</title><rect x="734.0" y="549" width="2.8" height="15.0" fill="rgb(221,38,41)" rx="2" ry="2" />
<text  x="736.96" y="559.5" ></text>
</g>
<g >
<title>ip_rcv_finish (154 samples, 37.20%)</title><rect x="18.6" y="197" width="438.9" height="15.0" fill="rgb(231,107,11)" rx="2" ry="2" />
<text  x="21.55" y="207.5" >ip_rcv_finish</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (147 samples, 35.51%)</title><rect x="756.8" y="405" width="418.9" height="15.0" fill="rgb(219,222,47)" rx="2" ry="2" />
<text  x="759.76" y="415.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>zmq::router_t::xsend (152 samples, 36.71%)</title><rect x="751.1" y="517" width="433.2" height="15.0" fill="rgb(234,195,54)" rx="2" ry="2" />
<text  x="754.06" y="527.5" >zmq::router_t::xsend</text>
</g>
<g >
<title>zmq::pipe_t::flush (151 samples, 36.47%)</title><rect x="751.1" y="501" width="430.3" height="15.0" fill="rgb(244,82,51)" rx="2" ry="2" />
<text  x="754.06" y="511.5" >zmq::pipe_t::flush</text>
</g>
<g >
<title>[libc-2.23.so] (1 samples, 0.24%)</title><rect x="1184.3" y="501" width="2.8" height="15.0" fill="rgb(214,16,36)" rx="2" ry="2" />
<text  x="1187.30" y="511.5" ></text>
</g>
<g >
<title>SYSC_sendto (158 samples, 38.16%)</title><rect x="12.9" y="565" width="450.3" height="15.0" fill="rgb(226,13,28)" rx="2" ry="2" />
<text  x="15.85" y="575.5" >SYSC_sendto</text>
</g>
<g >
<title>eventfd_write (85 samples, 20.53%)</title><rect x="486.0" y="341" width="242.3" height="15.0" fill="rgb(210,57,36)" rx="2" ry="2" />
<text  x="488.99" y="351.5" >eventfd_write</text>
</g>
<g >
<title>sys_epoll_wait (3 samples, 0.72%)</title><rect x="463.2" y="533" width="8.5" height="15.0" fill="rgb(248,61,15)" rx="2" ry="2" />
<text  x="466.19" y="543.5" ></text>
</g>
<g >
<title>epoll_ctl (1 samples, 0.24%)</title><rect x="483.1" y="453" width="2.9" height="15.0" fill="rgb(246,104,54)" rx="2" ry="2" />
<text  x="486.14" y="463.5" ></text>
</g>
<g >
<title>__local_bh_enable_ip (155 samples, 37.44%)</title><rect x="18.6" y="341" width="441.7" height="15.0" fill="rgb(239,212,20)" rx="2" ry="2" />
<text  x="21.55" y="351.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>tcp_sendmsg_locked (158 samples, 38.16%)</title><rect x="12.9" y="501" width="450.3" height="15.0" fill="rgb(222,18,37)" rx="2" ry="2" />
<text  x="15.85" y="511.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.24%)</title><rect x="734.0" y="581" width="2.8" height="15.0" fill="rgb(234,23,51)" rx="2" ry="2" />
<text  x="736.96" y="591.5" ></text>
</g>
<g >
<title>do_syscall_64 (158 samples, 38.16%)</title><rect x="12.9" y="597" width="450.3" height="15.0" fill="rgb(252,23,47)" rx="2" ry="2" />
<text  x="15.85" y="607.5" >do_syscall_64</text>
</g>
<g >
<title>zmq::socket_base_t::process_commands (2 samples, 0.48%)</title><rect x="1184.3" y="533" width="5.7" height="15.0" fill="rgb(225,166,36)" rx="2" ry="2" />
<text  x="1187.30" y="543.5" ></text>
</g>
<g >
<title>zmq::rep_t::xrecv (2 samples, 0.48%)</title><rect x="739.7" y="533" width="5.7" height="15.0" fill="rgb(252,6,7)" rx="2" ry="2" />
<text  x="742.66" y="543.5" ></text>
</g>
<g >
<title>__GI___libc_write (1 samples, 0.24%)</title><rect x="739.7" y="405" width="2.8" height="15.0" fill="rgb(242,177,32)" rx="2" ry="2" />
<text  x="742.66" y="415.5" ></text>
</g>
<g >
<title>sys_write (1 samples, 0.24%)</title><rect x="739.7" y="357" width="2.8" height="15.0" fill="rgb(237,108,0)" rx="2" ry="2" />
<text  x="742.66" y="367.5" ></text>
</g>
<g >
<title>tcp_push (157 samples, 37.92%)</title><rect x="15.7" y="485" width="447.5" height="15.0" fill="rgb(235,86,1)" rx="2" ry="2" />
<text  x="18.70" y="495.5" >tcp_push</text>
</g>
<g >
<title>tcp_sendmsg (158 samples, 38.16%)</title><rect x="12.9" y="517" width="450.3" height="15.0" fill="rgb(222,51,20)" rx="2" ry="2" />
<text  x="15.85" y="527.5" >tcp_sendmsg</text>
</g>
<g >
<title>[libc-2.23.so] (3 samples, 0.72%)</title><rect x="463.2" y="581" width="8.5" height="15.0" fill="rgb(252,87,1)" rx="2" ry="2" />
<text  x="466.19" y="591.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::set_pollout (1 samples, 0.24%)</title><rect x="483.1" y="485" width="2.9" height="15.0" fill="rgb(244,43,36)" rx="2" ry="2" />
<text  x="486.14" y="495.5" ></text>
</g>
<g >
<title>zmq::pipe_t::flush (85 samples, 20.53%)</title><rect x="486.0" y="517" width="242.3" height="15.0" fill="rgb(226,86,54)" rx="2" ry="2" />
<text  x="488.99" y="527.5" >zmq::pipe_t::flush</text>
</g>
<g >
<title>zmq::session_base_t::flush (85 samples, 20.53%)</title><rect x="486.0" y="533" width="242.3" height="15.0" fill="rgb(249,0,7)" rx="2" ry="2" />
<text  x="488.99" y="543.5" >zmq::session_base_t::flush</text>
</g>
<g >
<title>__vfs_write (1 samples, 0.24%)</title><rect x="739.7" y="325" width="2.8" height="15.0" fill="rgb(209,96,48)" rx="2" ry="2" />
<text  x="742.66" y="335.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (157 samples, 37.92%)</title><rect x="15.7" y="469" width="447.5" height="15.0" fill="rgb(242,11,25)" rx="2" ry="2" />
<text  x="18.70" y="479.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>__fget (1 samples, 0.24%)</title><rect x="1184.3" y="389" width="2.8" height="15.0" fill="rgb(227,10,21)" rx="2" ry="2" />
<text  x="1187.30" y="399.5" ></text>
</g>
<g >
<title>zmq::pipe_t::process_activate_read (2 samples, 0.48%)</title><rect x="480.3" y="533" width="5.7" height="15.0" fill="rgb(223,56,11)" rx="2" ry="2" />
<text  x="483.29" y="543.5" ></text>
</g>
<g >
<title>sys_poll (1 samples, 0.24%)</title><rect x="1184.3" y="453" width="2.8" height="15.0" fill="rgb(237,26,31)" rx="2" ry="2" />
<text  x="1187.30" y="463.5" ></text>
</g>
<g >
<title>[unknown] (162 samples, 39.13%)</title><rect x="728.3" y="629" width="461.7" height="15.0" fill="rgb(241,80,44)" rx="2" ry="2" />
<text  x="731.26" y="639.5" >[unknown]</text>
</g>
<g >
<title>zmq::object_t::send_command (85 samples, 20.53%)</title><rect x="486.0" y="485" width="242.3" height="15.0" fill="rgb(207,76,22)" rx="2" ry="2" />
<text  x="488.99" y="495.5" >zmq::object_t::send_command</text>
</g>
<g >
<title>zmq::session_base_t::read_activated (2 samples, 0.48%)</title><rect x="480.3" y="517" width="5.7" height="15.0" fill="rgb(225,34,47)" rx="2" ry="2" />
<text  x="483.29" y="527.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (3 samples, 0.72%)</title><rect x="463.2" y="485" width="8.5" height="15.0" fill="rgb(242,179,9)" rx="2" ry="2" />
<text  x="466.19" y="495.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.24%)</title><rect x="10.0" y="613" width="2.9" height="15.0" fill="rgb(210,159,36)" rx="2" ry="2" />
<text  x="13.00" y="623.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (155 samples, 37.44%)</title><rect x="18.6" y="229" width="441.7" height="15.0" fill="rgb(225,19,40)" rx="2" ry="2" />
<text  x="21.55" y="239.5" >__netif_receive_skb_core</text>
</g>
<g >
<title>eventfd_write (1 samples, 0.24%)</title><rect x="739.7" y="309" width="2.8" height="15.0" fill="rgb(215,13,8)" rx="2" ry="2" />
<text  x="742.66" y="319.5" ></text>
</g>
<g >
<title>__softirqentry_text_start (155 samples, 37.44%)</title><rect x="18.6" y="293" width="441.7" height="15.0" fill="rgb(250,188,7)" rx="2" ry="2" />
<text  x="21.55" y="303.5" >__softirqentry_text_start</text>
</g>
<g >
<title>tcp_event_new_data_sent (1 samples, 0.24%)</title><rect x="460.3" y="437" width="2.9" height="15.0" fill="rgb(220,64,25)" rx="2" ry="2" />
<text  x="463.34" y="447.5" ></text>
</g>
<g >
<title>zmq::object_t::send_command (151 samples, 36.47%)</title><rect x="751.1" y="469" width="430.3" height="15.0" fill="rgb(223,218,22)" rx="2" ry="2" />
<text  x="754.06" y="479.5" >zmq::object_t::send_command</text>
</g>
<g >
<title>zmq::ctx_t::send_command (150 samples, 36.23%)</title><rect x="753.9" y="453" width="427.5" height="15.0" fill="rgb(234,132,31)" rx="2" ry="2" />
<text  x="756.91" y="463.5" >zmq::ctx_t::send_command</text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.48%)</title><rect x="466.0" y="437" width="5.7" height="15.0" fill="rgb(241,194,13)" rx="2" ry="2" />
<text  x="469.04" y="447.5" ></text>
</g>
<g >
<title>zmq::mailbox_t::send (1 samples, 0.24%)</title><rect x="739.7" y="421" width="2.8" height="15.0" fill="rgb(231,32,54)" rx="2" ry="2" />
<text  x="742.66" y="431.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.24%)</title><rect x="734.0" y="485" width="2.8" height="15.0" fill="rgb(212,190,17)" rx="2" ry="2" />
<text  x="736.96" y="495.5" ></text>
</g>
<g >
<title>zmq::socket_base_t::recv (3 samples, 0.72%)</title><rect x="736.8" y="549" width="8.6" height="15.0" fill="rgb(252,198,9)" rx="2" ry="2" />
<text  x="739.81" y="559.5" ></text>
</g>
<g >
<title>__wake_up_common_lock (150 samples, 36.23%)</title><rect x="30.0" y="53" width="427.5" height="15.0" fill="rgb(252,30,21)" rx="2" ry="2" />
<text  x="32.95" y="63.5" >__wake_up_common_lock</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (158 samples, 38.16%)</title><rect x="12.9" y="613" width="450.3" height="15.0" fill="rgb(207,228,6)" rx="2" ry="2" />
<text  x="15.85" y="623.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>zmq::mailbox_t::send (85 samples, 20.53%)</title><rect x="486.0" y="453" width="242.3" height="15.0" fill="rgb(253,187,36)" rx="2" ry="2" />
<text  x="488.99" y="463.5" >zmq::mailbox_t::send</text>
</g>
<g >
<title>ip_rcv (155 samples, 37.44%)</title><rect x="18.6" y="213" width="441.7" height="15.0" fill="rgb(206,65,49)" rx="2" ry="2" />
<text  x="21.55" y="223.5" >ip_rcv</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.24%)</title><rect x="734.0" y="565" width="2.8" height="15.0" fill="rgb(247,194,22)" rx="2" ry="2" />
<text  x="736.96" y="575.5" ></text>
</g>
<g >
<title>zmq::pipe_t::check_write (1 samples, 0.24%)</title><rect x="1181.4" y="485" width="2.9" height="15.0" fill="rgb(254,162,38)" rx="2" ry="2" />
<text  x="1184.45" y="495.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::in_event (85 samples, 20.53%)</title><rect x="486.0" y="565" width="242.3" height="15.0" fill="rgb(207,103,22)" rx="2" ry="2" />
<text  x="488.99" y="575.5" >zmq::stream_engine_base_t::in_ev..</text>
</g>
<g >
<title>tcp_ack (1 samples, 0.24%)</title><rect x="24.3" y="101" width="2.8" height="15.0" fill="rgb(235,108,3)" rx="2" ry="2" />
<text  x="27.25" y="111.5" ></text>
</g>
<g >
<title>eventfd_write (147 samples, 35.51%)</title><rect x="756.8" y="325" width="418.9" height="15.0" fill="rgb(241,20,9)" rx="2" ry="2" />
<text  x="759.76" y="335.5" >eventfd_write</text>
</g>
<g >
<title>hrtimer_nanosleep (1 samples, 0.24%)</title><rect x="734.0" y="533" width="2.8" height="15.0" fill="rgb(226,162,18)" rx="2" ry="2" />
<text  x="736.96" y="543.5" ></text>
</g>
<g >
<title>getpid (1 samples, 0.24%)</title><rect x="1187.1" y="501" width="2.9" height="15.0" fill="rgb(240,124,21)" rx="2" ry="2" />
<text  x="1190.15" y="511.5" ></text>
</g>
<g >
<title>ip_local_deliver (154 samples, 37.20%)</title><rect x="18.6" y="181" width="438.9" height="15.0" fill="rgb(251,81,6)" rx="2" ry="2" />
<text  x="21.55" y="191.5" >ip_local_deliver</text>
</g>
<g >
<title>inet_sendmsg (158 samples, 38.16%)</title><rect x="12.9" y="533" width="450.3" height="15.0" fill="rgb(231,78,9)" rx="2" ry="2" />
<text  x="15.85" y="543.5" >inet_sendmsg</text>
</g>
<g >
<title>process_backlog (155 samples, 37.44%)</title><rect x="18.6" y="261" width="441.7" height="15.0" fill="rgb(247,182,28)" rx="2" ry="2" />
<text  x="21.55" y="271.5" >process_backlog</text>
</g>
<g >
<title>zmq::object_t::send_activate_write (1 samples, 0.24%)</title><rect x="739.7" y="469" width="2.8" height="15.0" fill="rgb(251,33,44)" rx="2" ry="2" />
<text  x="742.66" y="479.5" ></text>
</g>
<g >
<title>inet_recvmsg (1 samples, 0.24%)</title><rect x="10.0" y="533" width="2.9" height="15.0" fill="rgb(241,209,10)" rx="2" ry="2" />
<text  x="13.00" y="543.5" ></text>
</g>
<g >
<title>tcp_write_xmit (157 samples, 37.92%)</title><rect x="15.7" y="453" width="447.5" height="15.0" fill="rgb(226,221,0)" rx="2" ry="2" />
<text  x="18.70" y="463.5" >tcp_write_xmit</text>
</g>
<g >
<title>__wake_up_sync_key (150 samples, 36.23%)</title><rect x="30.0" y="69" width="427.5" height="15.0" fill="rgb(246,48,18)" rx="2" ry="2" />
<text  x="32.95" y="79.5" >__wake_up_sync_key</text>
</g>
<g >
<title>sys_recvfrom (1 samples, 0.24%)</title><rect x="10.0" y="581" width="2.9" height="15.0" fill="rgb(228,155,22)" rx="2" ry="2" />
<text  x="13.00" y="591.5" ></text>
</g>
<g >
<title>do_softirq.part.17 (155 samples, 37.44%)</title><rect x="18.6" y="325" width="441.7" height="15.0" fill="rgb(217,186,41)" rx="2" ry="2" />
<text  x="21.55" y="335.5" >do_softirq.part.17</text>
</g>
<g >
<title>zmq_recv (3 samples, 0.72%)</title><rect x="736.8" y="581" width="8.6" height="15.0" fill="rgb(239,19,21)" rx="2" ry="2" />
<text  x="739.81" y="591.5" ></text>
</g>
<g >
<title>ip_sabotage_in (1 samples, 0.24%)</title><rect x="457.5" y="197" width="2.8" height="15.0" fill="rgb(246,215,1)" rx="2" ry="2" />
<text  x="460.49" y="207.5" ></text>
</g>
<g >
<title>vfs_write (85 samples, 20.53%)</title><rect x="486.0" y="373" width="242.3" height="15.0" fill="rgb(235,229,8)" rx="2" ry="2" />
<text  x="488.99" y="383.5" >vfs_write</text>
</g>
<g >
<title>thread_routine (93 samples, 22.46%)</title><rect x="463.2" y="613" width="265.1" height="15.0" fill="rgb(210,209,45)" rx="2" ry="2" />
<text  x="466.19" y="623.5" >thread_routine</text>
</g>
<g >
<title>__tcp_transmit_skb (156 samples, 37.68%)</title><rect x="15.7" y="437" width="444.6" height="15.0" fill="rgb(231,100,42)" rx="2" ry="2" />
<text  x="18.70" y="447.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>tcp_rearm_rto.part.60 (1 samples, 0.24%)</title><rect x="460.3" y="421" width="2.9" height="15.0" fill="rgb(254,69,28)" rx="2" ry="2" />
<text  x="463.34" y="431.5" ></text>
</g>
<g >
<title>main (159 samples, 38.41%)</title><rect x="736.8" y="597" width="453.2" height="15.0" fill="rgb(217,19,24)" rx="2" ry="2" />
<text  x="739.81" y="607.5" >main</text>
</g>
<g >
<title>zmq::fq_t::recvpipe (1 samples, 0.24%)</title><rect x="739.7" y="501" width="2.8" height="15.0" fill="rgb(231,105,41)" rx="2" ry="2" />
<text  x="742.66" y="511.5" ></text>
</g>
<g >
<title>hwserver (162 samples, 39.13%)</title><rect x="728.3" y="645" width="461.7" height="15.0" fill="rgb(250,202,46)" rx="2" ry="2" />
<text  x="731.26" y="655.5" >hwserver</text>
</g>
<g >
<title>tcp_clean_rtx_queue (1 samples, 0.24%)</title><rect x="24.3" y="85" width="2.8" height="15.0" fill="rgb(228,63,5)" rx="2" ry="2" />
<text  x="27.25" y="95.5" ></text>
</g>
<g >
<title>__lock_text_start (150 samples, 36.23%)</title><rect x="30.0" y="37" width="427.5" height="15.0" fill="rgb(224,71,41)" rx="2" ry="2" />
<text  x="32.95" y="47.5" >__lock_text_start</text>
</g>
<g >
<title>zmq::stream_engine_base_t::out_event (1 samples, 0.24%)</title><rect x="480.3" y="485" width="2.8" height="15.0" fill="rgb(249,134,13)" rx="2" ry="2" />
<text  x="483.29" y="495.5" ></text>
</g>
</g>
</svg>
