<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="710" onload="init(evt)" viewBox="0 0 1200 710" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="710.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="693" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="693" > </text>
<g id="frames">
<g >
<title>zmq::fq_t::recvpipe (2 samples, 0.16%)</title><rect x="861.4" y="485" width="1.9" height="15.0" fill="rgb(213,166,9)" rx="2" ry="2" />
<text  x="864.42" y="495.5" ></text>
</g>
<g >
<title>eventfd_write (2 samples, 0.16%)</title><rect x="861.4" y="293" width="1.9" height="15.0" fill="rgb(242,79,8)" rx="2" ry="2" />
<text  x="864.42" y="303.5" ></text>
</g>
<g >
<title>__netif_receive_skb_core (448 samples, 36.69%)</title><rect x="10.0" y="229" width="433.0" height="15.0" fill="rgb(241,90,36)" rx="2" ry="2" />
<text  x="13.00" y="239.5" >__netif_receive_skb_core</text>
</g>
<g >
<title>__vfs_write (2 samples, 0.16%)</title><rect x="861.4" y="309" width="1.9" height="15.0" fill="rgb(242,190,12)" rx="2" ry="2" />
<text  x="864.42" y="319.5" ></text>
</g>
<g >
<title>schedule (2 samples, 0.16%)</title><rect x="864.3" y="373" width="1.9" height="15.0" fill="rgb(208,171,9)" rx="2" ry="2" />
<text  x="867.32" y="383.5" ></text>
</g>
<g >
<title>finish_task_switch (3 samples, 0.25%)</title><rect x="444.9" y="437" width="2.9" height="15.0" fill="rgb(242,127,12)" rx="2" ry="2" />
<text  x="447.89" y="447.5" ></text>
</g>
<g >
<title>__lock_text_start (1 samples, 0.08%)</title><rect x="863.3" y="389" width="1.0" height="15.0" fill="rgb(225,42,25)" rx="2" ry="2" />
<text  x="866.35" y="399.5" ></text>
</g>
<g >
<title>vfs_write (3 samples, 0.25%)</title><rect x="448.8" y="293" width="2.9" height="15.0" fill="rgb(213,65,18)" rx="2" ry="2" />
<text  x="451.76" y="303.5" ></text>
</g>
<g >
<title>zmq::pipe_t::read (2 samples, 0.16%)</title><rect x="861.4" y="469" width="1.9" height="15.0" fill="rgb(250,202,48)" rx="2" ry="2" />
<text  x="864.42" y="479.5" ></text>
</g>
<g >
<title>start_thread (433 samples, 35.46%)</title><rect x="443.0" y="629" width="418.4" height="15.0" fill="rgb(223,111,10)" rx="2" ry="2" />
<text  x="445.96" y="639.5" >start_thread</text>
</g>
<g >
<title>tcp_poll (1 samples, 0.08%)</title><rect x="443.9" y="437" width="1.0" height="15.0" fill="rgb(221,166,18)" rx="2" ry="2" />
<text  x="446.92" y="447.5" ></text>
</g>
<g >
<title>[unknown] (340 samples, 27.85%)</title><rect x="861.4" y="629" width="328.6" height="15.0" fill="rgb(236,205,0)" rx="2" ry="2" />
<text  x="864.42" y="639.5" >[unknown]</text>
</g>
<g >
<title>sock_poll (1 samples, 0.08%)</title><rect x="443.9" y="453" width="1.0" height="15.0" fill="rgb(212,10,29)" rx="2" ry="2" />
<text  x="446.92" y="463.5" ></text>
</g>
<g >
<title>zmq::pipe_t::check_hwm (1 samples, 0.08%)</title><rect x="859.5" y="453" width="1.0" height="15.0" fill="rgb(214,65,53)" rx="2" ry="2" />
<text  x="862.48" y="463.5" ></text>
</g>
<g >
<title>__schedule (3 samples, 0.25%)</title><rect x="444.9" y="453" width="2.9" height="15.0" fill="rgb(206,146,40)" rx="2" ry="2" />
<text  x="447.89" y="463.5" ></text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.25%)</title><rect x="863.3" y="469" width="2.9" height="15.0" fill="rgb(209,32,14)" rx="2" ry="2" />
<text  x="866.35" y="479.5" ></text>
</g>
<g >
<title>__GI___libc_write (2 samples, 0.16%)</title><rect x="861.4" y="389" width="1.9" height="15.0" fill="rgb(231,100,26)" rx="2" ry="2" />
<text  x="864.42" y="399.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.12 (1 samples, 0.08%)</title><rect x="860.5" y="453" width="0.9" height="15.0" fill="rgb(241,145,32)" rx="2" ry="2" />
<text  x="863.45" y="463.5" ></text>
</g>
<g >
<title>sys_write (3 samples, 0.25%)</title><rect x="448.8" y="309" width="2.9" height="15.0" fill="rgb(213,178,34)" rx="2" ry="2" />
<text  x="451.76" y="319.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (4 samples, 0.33%)</title><rect x="443.9" y="565" width="3.9" height="15.0" fill="rgb(207,76,22)" rx="2" ry="2" />
<text  x="446.92" y="575.5" ></text>
</g>
<g >
<title>zmq::object_t::send_activate_read (333 samples, 27.27%)</title><rect x="868.2" y="453" width="321.8" height="15.0" fill="rgb(206,193,19)" rx="2" ry="2" />
<text  x="871.18" y="463.5" >zmq::object_t::send_activate_read</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.25%)</title><rect x="863.3" y="485" width="2.9" height="15.0" fill="rgb(216,227,51)" rx="2" ry="2" />
<text  x="866.35" y="495.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::in_event (423 samples, 34.64%)</title><rect x="451.7" y="565" width="408.8" height="15.0" fill="rgb(225,28,3)" rx="2" ry="2" />
<text  x="454.65" y="575.5" >zmq::stream_engine_base_t::in_event</text>
</g>
<g >
<title>zmq::session_base_t::flush (422 samples, 34.56%)</title><rect x="451.7" y="533" width="407.8" height="15.0" fill="rgb(224,217,11)" rx="2" ry="2" />
<text  x="454.65" y="543.5" >zmq::session_base_t::flush</text>
</g>
<g >
<title>zmq::object_t::process_command (3 samples, 0.25%)</title><rect x="448.8" y="549" width="2.9" height="15.0" fill="rgb(254,213,46)" rx="2" ry="2" />
<text  x="451.76" y="559.5" ></text>
</g>
<g >
<title>__GI___libc_write (422 samples, 34.56%)</title><rect x="451.7" y="437" width="407.8" height="15.0" fill="rgb(218,193,5)" rx="2" ry="2" />
<text  x="454.65" y="447.5" >__GI___libc_write</text>
</g>
<g >
<title>tcp_push (448 samples, 36.69%)</title><rect x="10.0" y="485" width="433.0" height="15.0" fill="rgb(249,117,14)" rx="2" ry="2" />
<text  x="13.00" y="495.5" >tcp_push</text>
</g>
<g >
<title>zmq::worker_poller_base_t::worker_routine (433 samples, 35.46%)</title><rect x="443.0" y="597" width="418.4" height="15.0" fill="rgb(237,129,26)" rx="2" ry="2" />
<text  x="445.96" y="607.5" >zmq::worker_poller_base_t::worker_routine</text>
</g>
<g >
<title>s_recvmsg (7 samples, 0.57%)</title><rect x="861.4" y="565" width="6.8" height="15.0" fill="rgb(251,102,41)" rx="2" ry="2" />
<text  x="864.42" y="575.5" ></text>
</g>
<g >
<title>zmq::object_t::send_activate_write (2 samples, 0.16%)</title><rect x="861.4" y="453" width="1.9" height="15.0" fill="rgb(250,46,37)" rx="2" ry="2" />
<text  x="864.42" y="463.5" ></text>
</g>
<g >
<title>zmq::object_t::send_activate_write (3 samples, 0.25%)</title><rect x="448.8" y="421" width="2.9" height="15.0" fill="rgb(240,51,43)" rx="2" ry="2" />
<text  x="451.76" y="431.5" ></text>
</g>
<g >
<title>ip_local_deliver_finish (448 samples, 36.69%)</title><rect x="10.0" y="165" width="433.0" height="15.0" fill="rgb(234,209,5)" rx="2" ry="2" />
<text  x="13.00" y="175.5" >ip_local_deliver_finish</text>
</g>
<g >
<title>zmq::dealer_t::sendpipe (333 samples, 27.27%)</title><rect x="868.2" y="501" width="321.8" height="15.0" fill="rgb(210,170,15)" rx="2" ry="2" />
<text  x="871.18" y="511.5" >zmq::dealer_t::sendpipe</text>
</g>
<g >
<title>zmq::req_session_t::push_msg (1 samples, 0.08%)</title><rect x="859.5" y="517" width="1.0" height="15.0" fill="rgb(215,106,23)" rx="2" ry="2" />
<text  x="862.48" y="527.5" ></text>
</g>
<g >
<title>tcp_v4_do_rcv (448 samples, 36.69%)</title><rect x="10.0" y="133" width="433.0" height="15.0" fill="rgb(232,4,14)" rx="2" ry="2" />
<text  x="13.00" y="143.5" >tcp_v4_do_rcv</text>
</g>
<g >
<title>zmq::stream_engine_base_t::out_event (1 samples, 0.08%)</title><rect x="860.5" y="565" width="0.9" height="15.0" fill="rgb(243,112,1)" rx="2" ry="2" />
<text  x="863.45" y="575.5" ></text>
</g>
<g >
<title>do_softirq_own_stack (448 samples, 36.69%)</title><rect x="10.0" y="309" width="433.0" height="15.0" fill="rgb(206,138,9)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >do_softirq_own_stack</text>
</g>
<g >
<title>sock_sendmsg (448 samples, 36.69%)</title><rect x="10.0" y="549" width="433.0" height="15.0" fill="rgb(224,15,1)" rx="2" ry="2" />
<text  x="13.00" y="559.5" >sock_sendmsg</text>
</g>
<g >
<title>hwclient (340 samples, 27.85%)</title><rect x="861.4" y="645" width="328.6" height="15.0" fill="rgb(250,72,43)" rx="2" ry="2" />
<text  x="864.42" y="655.5" >hwclient</text>
</g>
<g >
<title>zmq::epoll_t::loop (428 samples, 35.05%)</title><rect x="447.8" y="581" width="413.6" height="15.0" fill="rgb(247,149,19)" rx="2" ry="2" />
<text  x="450.79" y="591.5" >zmq::epoll_t::loop</text>
</g>
<g >
<title>__softirqentry_text_start (448 samples, 36.69%)</title><rect x="10.0" y="293" width="433.0" height="15.0" fill="rgb(218,115,3)" rx="2" ry="2" />
<text  x="13.00" y="303.5" >__softirqentry_text_start</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 0.08%)</title><rect x="860.5" y="501" width="0.9" height="15.0" fill="rgb(205,73,44)" rx="2" ry="2" />
<text  x="863.45" y="511.5" ></text>
</g>
<g >
<title>zmq::socket_base_t::recv (7 samples, 0.57%)</title><rect x="861.4" y="549" width="6.8" height="15.0" fill="rgb(245,98,37)" rx="2" ry="2" />
<text  x="864.42" y="559.5" ></text>
</g>
<g >
<title>zmq::pipe_t::flush (422 samples, 34.56%)</title><rect x="451.7" y="517" width="407.8" height="15.0" fill="rgb(246,83,11)" rx="2" ry="2" />
<text  x="454.65" y="527.5" >zmq::pipe_t::flush</text>
</g>
<g >
<title>zmq::session_base_t::pull_msg (3 samples, 0.25%)</title><rect x="448.8" y="453" width="2.9" height="15.0" fill="rgb(208,220,12)" rx="2" ry="2" />
<text  x="451.76" y="463.5" ></text>
</g>
<g >
<title>ip_finish_output (448 samples, 36.69%)</title><rect x="10.0" y="373" width="433.0" height="15.0" fill="rgb(246,33,32)" rx="2" ry="2" />
<text  x="13.00" y="383.5" >ip_finish_output</text>
</g>
<g >
<title>zmq::pipe_t::process_activate_read (3 samples, 0.25%)</title><rect x="448.8" y="533" width="2.9" height="15.0" fill="rgb(207,140,27)" rx="2" ry="2" />
<text  x="451.76" y="543.5" ></text>
</g>
<g >
<title>ep_item_poll.isra.12 (1 samples, 0.08%)</title><rect x="443.9" y="469" width="1.0" height="15.0" fill="rgb(236,80,26)" rx="2" ry="2" />
<text  x="446.92" y="479.5" ></text>
</g>
<g >
<title>vfs_write (2 samples, 0.16%)</title><rect x="861.4" y="325" width="1.9" height="15.0" fill="rgb(240,32,25)" rx="2" ry="2" />
<text  x="864.42" y="335.5" ></text>
</g>
<g >
<title>zmq::session_base_t::read_activated (3 samples, 0.25%)</title><rect x="448.8" y="517" width="2.9" height="15.0" fill="rgb(241,85,18)" rx="2" ry="2" />
<text  x="451.76" y="527.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::in_event_internal (423 samples, 34.64%)</title><rect x="451.7" y="549" width="408.8" height="15.0" fill="rgb(250,124,45)" rx="2" ry="2" />
<text  x="454.65" y="559.5" >zmq::stream_engine_base_t::in_event_internal</text>
</g>
<g >
<title>zmq::ctx_t::send_command (333 samples, 27.27%)</title><rect x="868.2" y="421" width="321.8" height="15.0" fill="rgb(212,167,13)" rx="2" ry="2" />
<text  x="871.18" y="431.5" >zmq::ctx_t::send_command</text>
</g>
<g >
<title>do_syscall_64 (3 samples, 0.25%)</title><rect x="448.8" y="325" width="2.9" height="15.0" fill="rgb(225,189,25)" rx="2" ry="2" />
<text  x="451.76" y="335.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (3 samples, 0.25%)</title><rect x="448.8" y="341" width="2.9" height="15.0" fill="rgb(214,189,49)" rx="2" ry="2" />
<text  x="451.76" y="351.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 0.16%)</title><rect x="861.4" y="373" width="1.9" height="15.0" fill="rgb(238,195,15)" rx="2" ry="2" />
<text  x="864.42" y="383.5" ></text>
</g>
<g >
<title>zmq::session_base_t::push_msg (1 samples, 0.08%)</title><rect x="859.5" y="501" width="1.0" height="15.0" fill="rgb(209,185,21)" rx="2" ry="2" />
<text  x="862.48" y="511.5" ></text>
</g>
<g >
<title>ep_poll (4 samples, 0.33%)</title><rect x="443.9" y="517" width="3.9" height="15.0" fill="rgb(205,58,41)" rx="2" ry="2" />
<text  x="446.92" y="527.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range (3 samples, 0.25%)</title><rect x="444.9" y="501" width="2.9" height="15.0" fill="rgb(209,156,26)" rx="2" ry="2" />
<text  x="447.89" y="511.5" ></text>
</g>
<g >
<title>s_sendmsg (333 samples, 27.27%)</title><rect x="868.2" y="565" width="321.8" height="15.0" fill="rgb(246,103,33)" rx="2" ry="2" />
<text  x="871.18" y="575.5" >s_sendmsg</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (422 samples, 34.56%)</title><rect x="451.7" y="421" width="407.8" height="15.0" fill="rgb(219,207,31)" rx="2" ry="2" />
<text  x="454.65" y="431.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__tcp_transmit_skb (448 samples, 36.69%)</title><rect x="10.0" y="437" width="433.0" height="15.0" fill="rgb(222,179,26)" rx="2" ry="2" />
<text  x="13.00" y="447.5" >__tcp_transmit_skb</text>
</g>
<g >
<title>sys_epoll_wait (4 samples, 0.33%)</title><rect x="443.9" y="533" width="3.9" height="15.0" fill="rgb(230,201,16)" rx="2" ry="2" />
<text  x="446.92" y="543.5" ></text>
</g>
<g >
<title>zmq::pipe_t::check_write (1 samples, 0.08%)</title><rect x="859.5" y="469" width="1.0" height="15.0" fill="rgb(245,62,41)" rx="2" ry="2" />
<text  x="862.48" y="479.5" ></text>
</g>
<g >
<title>__vfs_write (422 samples, 34.56%)</title><rect x="451.7" y="357" width="407.8" height="15.0" fill="rgb(225,75,11)" rx="2" ry="2" />
<text  x="454.65" y="367.5" >__vfs_write</text>
</g>
<g >
<title>tcp_poll (1 samples, 0.08%)</title><rect x="860.5" y="421" width="0.9" height="15.0" fill="rgb(210,61,51)" rx="2" ry="2" />
<text  x="863.45" y="431.5" ></text>
</g>
<g >
<title>ip_finish_output2 (448 samples, 36.69%)</title><rect x="10.0" y="357" width="433.0" height="15.0" fill="rgb(205,97,12)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >ip_finish_output2</text>
</g>
<g >
<title>sys_write (2 samples, 0.16%)</title><rect x="861.4" y="341" width="1.9" height="15.0" fill="rgb(253,177,30)" rx="2" ry="2" />
<text  x="864.42" y="351.5" ></text>
</g>
<g >
<title>do_syscall_64 (2 samples, 0.16%)</title><rect x="861.4" y="357" width="1.9" height="15.0" fill="rgb(240,141,35)" rx="2" ry="2" />
<text  x="864.42" y="367.5" ></text>
</g>
<g >
<title>thread_routine (433 samples, 35.46%)</title><rect x="443.0" y="613" width="418.4" height="15.0" fill="rgb(212,228,22)" rx="2" ry="2" />
<text  x="445.96" y="623.5" >thread_routine</text>
</g>
<g >
<title>eventfd_write (333 samples, 27.27%)</title><rect x="868.2" y="293" width="321.8" height="15.0" fill="rgb(212,157,30)" rx="2" ry="2" />
<text  x="871.18" y="303.5" >eventfd_write</text>
</g>
<g >
<title>__local_bh_enable_ip (448 samples, 36.69%)</title><rect x="10.0" y="341" width="433.0" height="15.0" fill="rgb(242,141,11)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >__local_bh_enable_ip</text>
</g>
<g >
<title>tcp_data_queue (448 samples, 36.69%)</title><rect x="10.0" y="101" width="433.0" height="15.0" fill="rgb(224,2,25)" rx="2" ry="2" />
<text  x="13.00" y="111.5" >tcp_data_queue</text>
</g>
<g >
<title>zmq::mailbox_t::recv (1 samples, 0.08%)</title><rect x="447.8" y="549" width="1.0" height="15.0" fill="rgb(221,175,1)" rx="2" ry="2" />
<text  x="450.79" y="559.5" ></text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (448 samples, 36.69%)</title><rect x="10.0" y="613" width="433.0" height="15.0" fill="rgb(232,118,4)" rx="2" ry="2" />
<text  x="13.00" y="623.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>zmq::socket_base_t::process_commands (5 samples, 0.41%)</title><rect x="863.3" y="533" width="4.9" height="15.0" fill="rgb(232,207,43)" rx="2" ry="2" />
<text  x="866.35" y="543.5" ></text>
</g>
<g >
<title>ip_output (448 samples, 36.69%)</title><rect x="10.0" y="389" width="433.0" height="15.0" fill="rgb(224,121,17)" rx="2" ry="2" />
<text  x="13.00" y="399.5" >ip_output</text>
</g>
<g >
<title>tcp_v4_rcv (448 samples, 36.69%)</title><rect x="10.0" y="149" width="433.0" height="15.0" fill="rgb(252,27,43)" rx="2" ry="2" />
<text  x="13.00" y="159.5" >tcp_v4_rcv</text>
</g>
<g >
<title>zmq_recv (7 samples, 0.57%)</title><rect x="861.4" y="581" width="6.8" height="15.0" fill="rgb(245,82,14)" rx="2" ry="2" />
<text  x="864.42" y="591.5" ></text>
</g>
<g >
<title>zmq::pipe_t::write (1 samples, 0.08%)</title><rect x="859.5" y="485" width="1.0" height="15.0" fill="rgb(224,174,30)" rx="2" ry="2" />
<text  x="862.48" y="495.5" ></text>
</g>
<g >
<title>zmq::io_thread_t::in_event (4 samples, 0.33%)</title><rect x="447.8" y="565" width="3.9" height="15.0" fill="rgb(221,148,44)" rx="2" ry="2" />
<text  x="450.79" y="575.5" ></text>
</g>
<g >
<title>__vfs_write (3 samples, 0.25%)</title><rect x="448.8" y="277" width="2.9" height="15.0" fill="rgb(241,171,10)" rx="2" ry="2" />
<text  x="451.76" y="287.5" ></text>
</g>
<g >
<title>__GI___libc_write (3 samples, 0.25%)</title><rect x="448.8" y="357" width="2.9" height="15.0" fill="rgb(211,165,35)" rx="2" ry="2" />
<text  x="451.76" y="367.5" ></text>
</g>
<g >
<title>zmq::dealer_t::recvpipe (2 samples, 0.16%)</title><rect x="861.4" y="501" width="1.9" height="15.0" fill="rgb(242,40,17)" rx="2" ry="2" />
<text  x="864.42" y="511.5" ></text>
</g>
<g >
<title>zmq::mailbox_t::send (333 samples, 27.27%)</title><rect x="868.2" y="405" width="321.8" height="15.0" fill="rgb(236,23,40)" rx="2" ry="2" />
<text  x="871.18" y="415.5" >zmq::mailbox_t::send</text>
</g>
<g >
<title>zmq::stream_engine_base_t::out_event (3 samples, 0.25%)</title><rect x="448.8" y="485" width="2.9" height="15.0" fill="rgb(245,78,27)" rx="2" ry="2" />
<text  x="451.76" y="495.5" ></text>
</g>
<g >
<title>ip_queue_xmit (448 samples, 36.69%)</title><rect x="10.0" y="421" width="433.0" height="15.0" fill="rgb(208,19,28)" rx="2" ry="2" />
<text  x="13.00" y="431.5" >ip_queue_xmit</text>
</g>
<g >
<title>tcp_sendmsg_locked (448 samples, 36.69%)</title><rect x="10.0" y="501" width="433.0" height="15.0" fill="rgb(225,129,12)" rx="2" ry="2" />
<text  x="13.00" y="511.5" >tcp_sendmsg_locked</text>
</g>
<g >
<title>do_softirq.part.17 (448 samples, 36.69%)</title><rect x="10.0" y="325" width="433.0" height="15.0" fill="rgb(230,174,32)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >do_softirq.part.17</text>
</g>
<g >
<title>[libc-2.23.so] (5 samples, 0.41%)</title><rect x="443.0" y="581" width="4.8" height="15.0" fill="rgb(225,223,31)" rx="2" ry="2" />
<text  x="445.96" y="591.5" ></text>
</g>
<g >
<title>sys_epoll_ctl (1 samples, 0.08%)</title><rect x="860.5" y="469" width="0.9" height="15.0" fill="rgb(251,221,34)" rx="2" ry="2" />
<text  x="863.45" y="479.5" ></text>
</g>
<g >
<title>zmq::mailbox_t::send (422 samples, 34.56%)</title><rect x="451.7" y="453" width="407.8" height="15.0" fill="rgb(242,110,42)" rx="2" ry="2" />
<text  x="454.65" y="463.5" >zmq::mailbox_t::send</text>
</g>
<g >
<title>zmq::object_t::send_command (333 samples, 27.27%)</title><rect x="868.2" y="437" width="321.8" height="15.0" fill="rgb(254,10,14)" rx="2" ry="2" />
<text  x="871.18" y="447.5" >zmq::object_t::send_command</text>
</g>
<g >
<title>sys_sendto (448 samples, 36.69%)</title><rect x="10.0" y="581" width="433.0" height="15.0" fill="rgb(251,144,40)" rx="2" ry="2" />
<text  x="13.00" y="591.5" >sys_sendto</text>
</g>
<g >
<title>sys_write (422 samples, 34.56%)</title><rect x="451.7" y="389" width="407.8" height="15.0" fill="rgb(211,3,20)" rx="2" ry="2" />
<text  x="454.65" y="399.5" >sys_write</text>
</g>
<g >
<title>zmq::fq_t::activated (1 samples, 0.08%)</title><rect x="867.2" y="453" width="1.0" height="15.0" fill="rgb(251,97,47)" rx="2" ry="2" />
<text  x="870.22" y="463.5" ></text>
</g>
<g >
<title>inet_sendmsg (448 samples, 36.69%)</title><rect x="10.0" y="533" width="433.0" height="15.0" fill="rgb(213,164,10)" rx="2" ry="2" />
<text  x="13.00" y="543.5" >inet_sendmsg</text>
</g>
<g >
<title>zmq::ctx_t::send_command (3 samples, 0.25%)</title><rect x="448.8" y="389" width="2.9" height="15.0" fill="rgb(229,38,22)" rx="2" ry="2" />
<text  x="451.76" y="399.5" ></text>
</g>
<g >
<title>ip_local_out (448 samples, 36.69%)</title><rect x="10.0" y="405" width="433.0" height="15.0" fill="rgb(210,16,13)" rx="2" ry="2" />
<text  x="13.00" y="415.5" >ip_local_out</text>
</g>
<g >
<title>zmq::object_t::process_command (1 samples, 0.08%)</title><rect x="867.2" y="517" width="1.0" height="15.0" fill="rgb(218,40,22)" rx="2" ry="2" />
<text  x="870.22" y="527.5" ></text>
</g>
<g >
<title>__tcp_push_pending_frames (448 samples, 36.69%)</title><rect x="10.0" y="469" width="433.0" height="15.0" fill="rgb(241,38,29)" rx="2" ry="2" />
<text  x="13.00" y="479.5" >__tcp_push_pending_frames</text>
</g>
<g >
<title>do_syscall_64 (448 samples, 36.69%)</title><rect x="10.0" y="597" width="433.0" height="15.0" fill="rgb(218,81,23)" rx="2" ry="2" />
<text  x="13.00" y="607.5" >do_syscall_64</text>
</g>
<g >
<title>__lock_text_start (448 samples, 36.69%)</title><rect x="10.0" y="37" width="433.0" height="15.0" fill="rgb(241,62,25)" rx="2" ry="2" />
<text  x="13.00" y="47.5" >__lock_text_start</text>
</g>
<g >
<title>zmq::dealer_t::xsend (333 samples, 27.27%)</title><rect x="868.2" y="517" width="321.8" height="15.0" fill="rgb(217,199,30)" rx="2" ry="2" />
<text  x="871.18" y="527.5" >zmq::dealer_t::xsend</text>
</g>
<g >
<title>__netif_receive_skb (448 samples, 36.69%)</title><rect x="10.0" y="245" width="433.0" height="15.0" fill="rgb(248,160,22)" rx="2" ry="2" />
<text  x="13.00" y="255.5" >__netif_receive_skb</text>
</g>
<g >
<title>zmq::mailbox_t::send (2 samples, 0.16%)</title><rect x="861.4" y="405" width="1.9" height="15.0" fill="rgb(218,210,13)" rx="2" ry="2" />
<text  x="864.42" y="415.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::decode_and_push (1 samples, 0.08%)</title><rect x="859.5" y="533" width="1.0" height="15.0" fill="rgb(233,67,23)" rx="2" ry="2" />
<text  x="862.48" y="543.5" ></text>
</g>
<g >
<title>zmq::ctx_t::send_command (422 samples, 34.56%)</title><rect x="451.7" y="469" width="407.8" height="15.0" fill="rgb(224,215,28)" rx="2" ry="2" />
<text  x="454.65" y="479.5" >zmq::ctx_t::send_command</text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (2 samples, 0.16%)</title><rect x="864.3" y="389" width="1.9" height="15.0" fill="rgb(232,163,46)" rx="2" ry="2" />
<text  x="867.32" y="399.5" ></text>
</g>
<g >
<title>do_syscall_64 (333 samples, 27.27%)</title><rect x="868.2" y="357" width="321.8" height="15.0" fill="rgb(239,88,43)" rx="2" ry="2" />
<text  x="871.18" y="367.5" >do_syscall_64</text>
</g>
<g >
<title>zmq::object_t::send_activate_read (422 samples, 34.56%)</title><rect x="451.7" y="501" width="407.8" height="15.0" fill="rgb(210,175,13)" rx="2" ry="2" />
<text  x="454.65" y="511.5" >zmq::object_t::send_activate_read</text>
</g>
<g >
<title>zmq::pipe_t::process_activate_read (1 samples, 0.08%)</title><rect x="867.2" y="501" width="1.0" height="15.0" fill="rgb(218,82,13)" rx="2" ry="2" />
<text  x="870.22" y="511.5" ></text>
</g>
<g >
<title>zmq::req_t::xsend (333 samples, 27.27%)</title><rect x="868.2" y="533" width="321.8" height="15.0" fill="rgb(226,121,8)" rx="2" ry="2" />
<text  x="871.18" y="543.5" >zmq::req_t::xsend</text>
</g>
<g >
<title>SYSC_sendto (448 samples, 36.69%)</title><rect x="10.0" y="565" width="433.0" height="15.0" fill="rgb(228,221,26)" rx="2" ry="2" />
<text  x="13.00" y="575.5" >SYSC_sendto</text>
</g>
<g >
<title>ZMQbg/IO/0 (881 samples, 72.15%)</title><rect x="10.0" y="645" width="851.4" height="15.0" fill="rgb(213,137,26)" rx="2" ry="2" />
<text  x="13.00" y="655.5" >ZMQbg/IO/0</text>
</g>
<g >
<title>zmq::stream_engine_base_t::restart_output (3 samples, 0.25%)</title><rect x="448.8" y="501" width="2.9" height="15.0" fill="rgb(253,63,46)" rx="2" ry="2" />
<text  x="451.76" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (4 samples, 0.33%)</title><rect x="443.9" y="549" width="3.9" height="15.0" fill="rgb(247,155,13)" rx="2" ry="2" />
<text  x="446.92" y="559.5" ></text>
</g>
<g >
<title>__schedule (2 samples, 0.16%)</title><rect x="864.3" y="357" width="1.9" height="15.0" fill="rgb(247,61,13)" rx="2" ry="2" />
<text  x="867.32" y="367.5" ></text>
</g>
<g >
<title>__libc_disable_asynccancel (1 samples, 0.08%)</title><rect x="866.2" y="501" width="1.0" height="15.0" fill="rgb(225,10,6)" rx="2" ry="2" />
<text  x="869.25" y="511.5" ></text>
</g>
<g >
<title>ip_local_deliver (448 samples, 36.69%)</title><rect x="10.0" y="181" width="433.0" height="15.0" fill="rgb(218,93,2)" rx="2" ry="2" />
<text  x="13.00" y="191.5" >ip_local_deliver</text>
</g>
<g >
<title>std::vector&lt;zmq::pipe_t*, std::allocator&lt;zmq::pipe_t*&gt; &gt;::operator[] (1 samples, 0.08%)</title><rect x="867.2" y="437" width="1.0" height="15.0" fill="rgb(209,206,18)" rx="2" ry="2" />
<text  x="870.22" y="447.5" ></text>
</g>
<g >
<title>zmq::ctx_t::send_command (2 samples, 0.16%)</title><rect x="861.4" y="421" width="1.9" height="15.0" fill="rgb(241,45,48)" rx="2" ry="2" />
<text  x="864.42" y="431.5" ></text>
</g>
<g >
<title>__GI___libc_write (333 samples, 27.27%)</title><rect x="868.2" y="389" width="321.8" height="15.0" fill="rgb(236,4,31)" rx="2" ry="2" />
<text  x="871.18" y="399.5" >__GI___libc_write</text>
</g>
<g >
<title>zmq::mailbox_t::send (3 samples, 0.25%)</title><rect x="448.8" y="373" width="2.9" height="15.0" fill="rgb(234,55,53)" rx="2" ry="2" />
<text  x="451.76" y="383.5" ></text>
</g>
<g >
<title>__vfs_write (333 samples, 27.27%)</title><rect x="868.2" y="309" width="321.8" height="15.0" fill="rgb(215,116,37)" rx="2" ry="2" />
<text  x="871.18" y="319.5" >__vfs_write</text>
</g>
<g >
<title>ip_rcv (448 samples, 36.69%)</title><rect x="10.0" y="213" width="433.0" height="15.0" fill="rgb(231,128,21)" rx="2" ry="2" />
<text  x="13.00" y="223.5" >ip_rcv</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (333 samples, 27.27%)</title><rect x="868.2" y="373" width="321.8" height="15.0" fill="rgb(254,164,36)" rx="2" ry="2" />
<text  x="871.18" y="383.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>poll_schedule_timeout (2 samples, 0.16%)</title><rect x="864.3" y="421" width="1.9" height="15.0" fill="rgb(245,143,52)" rx="2" ry="2" />
<text  x="867.32" y="431.5" ></text>
</g>
<g >
<title>schedule_hrtimeout_range_clock (3 samples, 0.25%)</title><rect x="444.9" y="485" width="2.9" height="15.0" fill="rgb(252,85,43)" rx="2" ry="2" />
<text  x="447.89" y="495.5" ></text>
</g>
<g >
<title>process_backlog (448 samples, 36.69%)</title><rect x="10.0" y="261" width="433.0" height="15.0" fill="rgb(236,7,50)" rx="2" ry="2" />
<text  x="13.00" y="271.5" >process_backlog</text>
</g>
<g >
<title>__wake_up_common_lock (448 samples, 36.69%)</title><rect x="10.0" y="53" width="433.0" height="15.0" fill="rgb(211,49,11)" rx="2" ry="2" />
<text  x="13.00" y="63.5" >__wake_up_common_lock</text>
</g>
<g >
<title>zmq::mailbox_t::recv (4 samples, 0.33%)</title><rect x="863.3" y="517" width="3.9" height="15.0" fill="rgb(227,189,42)" rx="2" ry="2" />
<text  x="866.35" y="527.5" ></text>
</g>
<g >
<title>sock_poll (1 samples, 0.08%)</title><rect x="860.5" y="437" width="0.9" height="15.0" fill="rgb(232,143,49)" rx="2" ry="2" />
<text  x="863.45" y="447.5" ></text>
</g>
<g >
<title>sys_write (333 samples, 27.27%)</title><rect x="868.2" y="341" width="321.8" height="15.0" fill="rgb(230,58,1)" rx="2" ry="2" />
<text  x="871.18" y="351.5" >sys_write</text>
</g>
<g >
<title>sys_poll (3 samples, 0.25%)</title><rect x="863.3" y="453" width="2.9" height="15.0" fill="rgb(253,113,6)" rx="2" ry="2" />
<text  x="866.35" y="463.5" ></text>
</g>
<g >
<title>tcp_rcv_established (448 samples, 36.69%)</title><rect x="10.0" y="117" width="433.0" height="15.0" fill="rgb(209,87,13)" rx="2" ry="2" />
<text  x="13.00" y="127.5" >tcp_rcv_established</text>
</g>
<g >
<title>vfs_write (422 samples, 34.56%)</title><rect x="451.7" y="373" width="407.8" height="15.0" fill="rgb(226,180,23)" rx="2" ry="2" />
<text  x="454.65" y="383.5" >vfs_write</text>
</g>
<g >
<title>zmq::lb_t::sendpipe (333 samples, 27.27%)</title><rect x="868.2" y="485" width="321.8" height="15.0" fill="rgb(249,137,23)" rx="2" ry="2" />
<text  x="871.18" y="495.5" >zmq::lb_t::sendpipe</text>
</g>
<g >
<title>schedule_hrtimeout_range (2 samples, 0.16%)</title><rect x="864.3" y="405" width="1.9" height="15.0" fill="rgb(217,185,15)" rx="2" ry="2" />
<text  x="867.32" y="415.5" ></text>
</g>
<g >
<title>net_rx_action (448 samples, 36.69%)</title><rect x="10.0" y="277" width="433.0" height="15.0" fill="rgb(243,81,31)" rx="2" ry="2" />
<text  x="13.00" y="287.5" >net_rx_action</text>
</g>
<g >
<title>poll_freewait (1 samples, 0.08%)</title><rect x="863.3" y="421" width="1.0" height="15.0" fill="rgb(216,216,36)" rx="2" ry="2" />
<text  x="866.35" y="431.5" ></text>
</g>
<g >
<title>eventfd_write (422 samples, 34.56%)</title><rect x="451.7" y="341" width="407.8" height="15.0" fill="rgb(247,33,34)" rx="2" ry="2" />
<text  x="454.65" y="351.5" >eventfd_write</text>
</g>
<g >
<title>main (340 samples, 27.85%)</title><rect x="861.4" y="597" width="328.6" height="15.0" fill="rgb(225,174,2)" rx="2" ry="2" />
<text  x="864.42" y="607.5" >main</text>
</g>
<g >
<title>zmq::object_t::send_command (2 samples, 0.16%)</title><rect x="861.4" y="437" width="1.9" height="15.0" fill="rgb(229,54,11)" rx="2" ry="2" />
<text  x="864.42" y="447.5" ></text>
</g>
<g >
<title>ip_rcv_finish (448 samples, 36.69%)</title><rect x="10.0" y="197" width="433.0" height="15.0" fill="rgb(239,56,3)" rx="2" ry="2" />
<text  x="13.00" y="207.5" >ip_rcv_finish</text>
</g>
<g >
<title>remove_wait_queue (1 samples, 0.08%)</title><rect x="863.3" y="405" width="1.0" height="15.0" fill="rgb(242,83,27)" rx="2" ry="2" />
<text  x="866.35" y="415.5" ></text>
</g>
<g >
<title>epoll_ctl (1 samples, 0.08%)</title><rect x="860.5" y="517" width="0.9" height="15.0" fill="rgb(240,56,5)" rx="2" ry="2" />
<text  x="863.45" y="527.5" ></text>
</g>
<g >
<title>zmq::dealer_t::xread_activated (1 samples, 0.08%)</title><rect x="867.2" y="469" width="1.0" height="15.0" fill="rgb(249,20,52)" rx="2" ry="2" />
<text  x="870.22" y="479.5" ></text>
</g>
<g >
<title>__libc_start_main (340 samples, 27.85%)</title><rect x="861.4" y="613" width="328.6" height="15.0" fill="rgb(246,30,49)" rx="2" ry="2" />
<text  x="864.42" y="623.5" >__libc_start_main</text>
</g>
<g >
<title>vfs_write (333 samples, 27.27%)</title><rect x="868.2" y="325" width="321.8" height="15.0" fill="rgb(233,76,34)" rx="2" ry="2" />
<text  x="871.18" y="335.5" >vfs_write</text>
</g>
<g >
<title>all (1,221 samples, 100%)</title><rect x="10.0" y="661" width="1180.0" height="15.0" fill="rgb(225,225,37)" rx="2" ry="2" />
<text  x="13.00" y="671.5" ></text>
</g>
<g >
<title>__wake_up_sync_key (448 samples, 36.69%)</title><rect x="10.0" y="69" width="433.0" height="15.0" fill="rgb(231,18,23)" rx="2" ry="2" />
<text  x="13.00" y="79.5" >__wake_up_sync_key</text>
</g>
<g >
<title>zmq::pipe_t::read (3 samples, 0.25%)</title><rect x="448.8" y="437" width="2.9" height="15.0" fill="rgb(247,178,7)" rx="2" ry="2" />
<text  x="451.76" y="447.5" ></text>
</g>
<g >
<title>zmq::pipe_t::flush (333 samples, 27.27%)</title><rect x="868.2" y="469" width="321.8" height="15.0" fill="rgb(221,175,25)" rx="2" ry="2" />
<text  x="871.18" y="479.5" >zmq::pipe_t::flush</text>
</g>
<g >
<title>eventfd_write (3 samples, 0.25%)</title><rect x="448.8" y="261" width="2.9" height="15.0" fill="rgb(236,94,42)" rx="2" ry="2" />
<text  x="451.76" y="271.5" ></text>
</g>
<g >
<title>zmq::object_t::send_command (422 samples, 34.56%)</title><rect x="451.7" y="485" width="407.8" height="15.0" fill="rgb(250,200,31)" rx="2" ry="2" />
<text  x="454.65" y="495.5" >zmq::object_t::send_command</text>
</g>
<g >
<title>tcp_write_xmit (448 samples, 36.69%)</title><rect x="10.0" y="453" width="433.0" height="15.0" fill="rgb(244,210,23)" rx="2" ry="2" />
<text  x="13.00" y="463.5" >tcp_write_xmit</text>
</g>
<g >
<title>zmq::req_t::xrecv (2 samples, 0.16%)</title><rect x="861.4" y="533" width="1.9" height="15.0" fill="rgb(237,81,22)" rx="2" ry="2" />
<text  x="864.42" y="543.5" ></text>
</g>
<g >
<title>sock_def_readable (448 samples, 36.69%)</title><rect x="10.0" y="85" width="433.0" height="15.0" fill="rgb(230,88,48)" rx="2" ry="2" />
<text  x="13.00" y="95.5" >sock_def_readable</text>
</g>
<g >
<title>__libc_send (448 samples, 36.69%)</title><rect x="10.0" y="629" width="433.0" height="15.0" fill="rgb(225,131,46)" rx="2" ry="2" />
<text  x="13.00" y="639.5" >__libc_send</text>
</g>
<g >
<title>schedule (3 samples, 0.25%)</title><rect x="444.9" y="469" width="2.9" height="15.0" fill="rgb(253,226,4)" rx="2" ry="2" />
<text  x="447.89" y="479.5" ></text>
</g>
<g >
<title>zmq::object_t::send_command (3 samples, 0.25%)</title><rect x="448.8" y="405" width="2.9" height="15.0" fill="rgb(206,7,0)" rx="2" ry="2" />
<text  x="451.76" y="415.5" ></text>
</g>
<g >
<title>zmq_send (333 samples, 27.27%)</title><rect x="868.2" y="581" width="321.8" height="15.0" fill="rgb(226,144,41)" rx="2" ry="2" />
<text  x="871.18" y="591.5" >zmq_send</text>
</g>
<g >
<title>[libc-2.23.so] (3 samples, 0.25%)</title><rect x="863.3" y="501" width="2.9" height="15.0" fill="rgb(210,151,28)" rx="2" ry="2" />
<text  x="866.35" y="511.5" ></text>
</g>
<g >
<title>do_syscall_64 (1 samples, 0.08%)</title><rect x="860.5" y="485" width="0.9" height="15.0" fill="rgb(245,198,1)" rx="2" ry="2" />
<text  x="863.45" y="495.5" ></text>
</g>
<g >
<title>zmq::socket_base_t::send (333 samples, 27.27%)</title><rect x="868.2" y="549" width="321.8" height="15.0" fill="rgb(253,56,16)" rx="2" ry="2" />
<text  x="871.18" y="559.5" >zmq::socket_base_t::send</text>
</g>
<g >
<title>zmq::io_object_t::reset_pollout (1 samples, 0.08%)</title><rect x="860.5" y="533" width="0.9" height="15.0" fill="rgb(229,4,17)" rx="2" ry="2" />
<text  x="863.45" y="543.5" ></text>
</g>
<g >
<title>zmq::req_t::recv_reply_pipe (2 samples, 0.16%)</title><rect x="861.4" y="517" width="1.9" height="15.0" fill="rgb(228,22,0)" rx="2" ry="2" />
<text  x="864.42" y="527.5" ></text>
</g>
<g >
<title>ep_send_events_proc (1 samples, 0.08%)</title><rect x="443.9" y="485" width="1.0" height="15.0" fill="rgb(228,160,0)" rx="2" ry="2" />
<text  x="446.92" y="495.5" ></text>
</g>
<g >
<title>finish_task_switch (2 samples, 0.16%)</title><rect x="864.3" y="341" width="1.9" height="15.0" fill="rgb(251,224,23)" rx="2" ry="2" />
<text  x="867.32" y="351.5" ></text>
</g>
<g >
<title>tcp_sendmsg (448 samples, 36.69%)</title><rect x="10.0" y="517" width="433.0" height="15.0" fill="rgb(228,80,36)" rx="2" ry="2" />
<text  x="13.00" y="527.5" >tcp_sendmsg</text>
</g>
<g >
<title>do_syscall_64 (422 samples, 34.56%)</title><rect x="451.7" y="405" width="407.8" height="15.0" fill="rgb(248,53,27)" rx="2" ry="2" />
<text  x="454.65" y="415.5" >do_syscall_64</text>
</g>
<g >
<title>zmq::stream_engine_base_t::pull_and_encode (3 samples, 0.25%)</title><rect x="448.8" y="469" width="2.9" height="15.0" fill="rgb(246,92,5)" rx="2" ry="2" />
<text  x="451.76" y="479.5" ></text>
</g>
<g >
<title>ep_scan_ready_list (1 samples, 0.08%)</title><rect x="443.9" y="501" width="1.0" height="15.0" fill="rgb(223,133,4)" rx="2" ry="2" />
<text  x="446.92" y="511.5" ></text>
</g>
<g >
<title>do_sys_poll (3 samples, 0.25%)</title><rect x="863.3" y="437" width="2.9" height="15.0" fill="rgb(221,113,35)" rx="2" ry="2" />
<text  x="866.35" y="447.5" ></text>
</g>
<g >
<title>zmq::socket_base_t::read_activated (1 samples, 0.08%)</title><rect x="867.2" y="485" width="1.0" height="15.0" fill="rgb(243,229,44)" rx="2" ry="2" />
<text  x="870.22" y="495.5" ></text>
</g>
<g >
<title>zmq::stream_engine_base_t::reset_pollout (1 samples, 0.08%)</title><rect x="860.5" y="549" width="0.9" height="15.0" fill="rgb(234,88,9)" rx="2" ry="2" />
<text  x="863.45" y="559.5" ></text>
</g>
</g>
</svg>
